# Generated by Django 3.0.8 on 2020-07-20 21:44

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='incident_observations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('notes', models.CharField(blank=True, max_length=500, null=True)),
                ('public', models.BooleanField()),
            ],
            options={
                'verbose_name_plural': 'incedent observations',
            },
        ),
        migrations.CreateModel(
            name='map_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                'verbose_name_plural': 'map data',
            },
        ),
        migrations.CreateModel(
            name='observation_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_type', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name_plural': 'observation types',
            },
        ),
        migrations.CreateModel(
            name='project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manager', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latin_name', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('invasive', models.BooleanField()),
                ('CDC_rank', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'species',
                'ordering': ['latin_name'],
            },
        ),
        migrations.CreateModel(
            name='survey_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_text', models.CharField(blank=True, max_length=500, null=True)),
                ('data_bool', models.BooleanField(blank=True, null=True)),
                ('data_int', models.IntegerField(blank=True, null=True)),
                ('data_file', models.FileField(blank=True, null=True, upload_to='uploads/')),
                ('data_form', models.IntegerField(choices=[(1, 'Text'), (2, 'Boolean'), (3, 'Integer'), (4, 'File')])),
                ('public', models.BooleanField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project')),
            ],
            options={
                'verbose_name_plural': 'survey data',
            },
        ),
        migrations.CreateModel(
            name='survey_method_types',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'survey method types',
            },
        ),
        migrations.CreateModel(
            name='survey_methods',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method_name', models.CharField(max_length=100)),
                ('type_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.survey_method_types')),
            ],
            options={
                'verbose_name_plural': 'survey methods',
                'unique_together': {('type_name', 'method_name')},
            },
        ),
        migrations.CreateModel(
            name='survey_questions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=500)),
                ('data_form', models.IntegerField(choices=[(1, 'Text'), (2, 'Boolean'), (3, 'Integer'), (4, 'File')])),
                ('method', models.ManyToManyField(to='api.survey_methods')),
                ('method_type', models.ManyToManyField(to='api.survey_method_types')),
                ('species', models.ManyToManyField(to='api.species')),
            ],
            options={
                'verbose_name_plural': 'survey questions',
            },
        ),
        migrations.CreateModel(
            name='survey_template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public', models.BooleanField()),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.project')),
                ('questions', models.ManyToManyField(to='api.survey_questions')),
            ],
            options={
                'verbose_name_plural': 'survey templates',
            },
        ),
        migrations.DeleteModel(
            name='app_user',
        ),
        migrations.AddField(
            model_name='survey_data',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.survey_questions'),
        ),
        migrations.AddField(
            model_name='survey_data',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='map_data',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.project'),
        ),
        migrations.AddField(
            model_name='map_data',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.species'),
        ),
        migrations.AddField(
            model_name='incident_observations',
            name='observation_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.observation_type'),
        ),
        migrations.AddField(
            model_name='incident_observations',
            name='species',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.species'),
        ),
        migrations.AddField(
            model_name='incident_observations',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='survey_data',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('data_bool__isnull', False), ('data_file__eql', ''), ('data_form', 2), ('data_int__isnull', True), ('data_text__isnull', True)), models.Q(('data_bool__isnull', True), ('data_file__eql', ''), ('data_form', 1), ('data_int__isnull', True), ('data_text__isnull', False)), models.Q(('data_bool__isnull', True), ('data_file__eql', ''), ('data_form', 3), ('data_int__isnull', False), ('data_text__isnull', True)), models.Q(('data_bool__isnull', True), ('data_file__ne', ''), ('data_form', 4), ('data_int__isnull', True), ('data_text__isnull', True)), _connector='OR'), name='data_type_constraint'),
        ),
    ]
